import Interface, { APILocale } from "../interface.js";
/**
 * Interfaces with all event related endpoints.
 *
 * @internal @sealed
 */
export default class Events extends Interface {
    /**
     * Fetch data on currently live events.
     *
     * @param locale - The locale of the response data.
     * @returns An object containing data on currently live events.
     *
     * @see {@link https://vickz84259.github.io/lolesports-api-docs/#operation/getLive | vickz84259's endpoint documentation}.
     *
     * @example Log all currently live events.
     * ```ts
     * import APIClient from 'lol-esports-api';
     *
     * const client = new APIClient();
     * const liveEvents = await client.getLive();
     *
     * console.log(liveEvents);
     * ```
     *
     * @public @sealed
     */
    getLive(locale?: APILocale): Promise<{
        data: {
            schedule: {
                events: ({
                    startTime: string;
                    blockName: string | null;
                    match: {
                        teams: {
                            code: string;
                            image: string;
                            name: string;
                        }[];
                    } & {
                        id: string;
                    } & {
                        strategy: {
                            count: 1 | 3 | 5;
                        } & {
                            type: "bestOf";
                        };
                        teams: {
                            result: {
                                gameWins: number;
                            };
                        }[];
                    };
                } & {
                    state: "completed" | "unstarted" | "inProgress";
                    type: "match" | "show";
                } & {
                    id: string;
                    league: {
                        name: string;
                        slug: string;
                    } & {
                        id: string;
                        image: string;
                    } & {
                        priority: number;
                    };
                    match?: {
                        teams: {
                            slug: string;
                            record: {
                                losses: number;
                                wins: number;
                            } | null;
                            result: {
                                outcome: "loss" | "win" | null;
                            };
                        }[];
                    } | undefined;
                })[] | null;
            };
        };
    }>;
}
//# sourceMappingURL=events.d.ts.map