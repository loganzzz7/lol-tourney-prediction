import axios, { AxiosError } from "axios";
import { parseParameterizedEndpointPath } from "./utils.js";
/**
 * Base class for interacting with the eSports API.
 *
 * @internal
 */
export default class Interface {
    /**
     * The eSports API's base URLs.
     *
     * @sealed @internal @readonly
     */
    _baseURLs = {
        main: [
            "https://esports-api.lolesports.com/persisted/gw",
            "https://prod-relapi.ewp.gg/persisted/gw",
        ],
        feed: ["https://feed.lolesports.com/livestats/v1"],
    };
    /**
     * Issues a request to the eSports API.
     *
     * @remarks
     * Recursively tries to request each of the base URLs in {@link Interface._baseURLs} if the previous one has failed to yield a successful response.
     *
     * @typeParam T - An API endpoint identifier.
     * @param baseURLs - The base URL(s) to use within the request.
     * @param endpoint - The API endpoint to which send the request.
     * @param params - The query parameters to send with the request.
     * @returns Data for the specified resource.
     *
     * @throws {@link Error}
     * When {@link Interface._baseURLs} is undefined.
     *
     * @throws {@link Error}
     * When it can't get a successfuly response from any of the endpoints built from {@link Interface._baseURLs}.
     *
     * @internal @sealed
     */
    async _get(baseURLs, endpoint, params) {
        if (!this._baseURLs) {
            throw new Error("No API base URLs specified.");
        }
        let resolvedEndpointPath = endpoint;
        if (params?.path)
            resolvedEndpointPath = parseParameterizedEndpointPath(endpoint, params.path);
        for await (const baseURL of baseURLs) {
            try {
                const response = await axios.get(`${baseURL}${resolvedEndpointPath}`, {
                    headers: {
                        // API key is supposed to be public here.
                        "x-api-key": "0TvQnueqKa5mxJntVWt0w4LpLfEkrV1Ta8rQBb9Z",
                    },
                    params: params.query,
                    paramsSerializer: {
                        indexes: null,
                    },
                });
                if (response.status === 200) {
                    return response.data;
                }
            }
            catch (reason) {
                if (reason instanceof AxiosError && reason.code !== "ENOTFOUND")
                    throw reason;
            }
        }
        throw new Error("Could not get a successful response from any of the base URLs.");
    }
}
//# sourceMappingURL=interface.js.map